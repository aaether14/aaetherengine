/**
---aae_linked_list.def - Dinescu Stefan-Cristian aka Aaether - 31.07.2016
----------------------------------------------------------------------
Code generation for linked list holding TYPE data
-td stands for typedef
-don't ever use variables, functions etc. starting with "__". Only the framework has this right.
Features:
-push a new node to the front of the list
-push a new node to the back of the list
Safe types:
-aae_LinkedList(TYPE)
-aae_LinkedListElement(TYPE)
*/



#ifndef AAE_LINKED_LIST_DEF
#define AAE_LINKED_LIST_DEF
#include "aae_defines.h"
#include "aae_types.h"
#include "aae_memory_allocator.h"



/**
*Posible return values for the linked list
*/
	enum AAE_LINKED_LIST_RETURN_VALUES
	{	AAE_LINKED_LIST_ALLOCATION_ERROR = -1, //malloc error
		AAE_LINKED_LIST_FALSE = 0,
		AAE_LINKED_LIST_TRUE = 1,
		AAE_LINKED_LIST_SUCCESS = 2
	};
#endif /* AAE_LINKED_LIST_H*/






#ifndef AAE_LINKED_LIST_TYPE
#error "Must define AAE_LINKED_LIST_TYPE!"
#endif



#ifndef AAE_LINKED_LIST_MEMORY_ARENA
#error "Must define AAE_LINKED_LIST_MEMORY_ARENA"
#endif



/**
*Indirection is used in order to achieve defined token concatenation
*/
#define __AAE_LINKED_LIST(NAME) INDIRECT_TOKENPASTE(INDIRECT_TOKENPASTE(__linked_list, NAME), AAE_LINKED_LIST_TYPE)



	struct __AAE_LINKED_LIST(_elem) /* __linked_list_elem##AAE_LINKED_LIST_TYPE -eg.__linked_list_elemfloat */
	{
		AAE_LINKED_LIST_TYPE m_data;
		__AAE_LINKED_LIST(_elem) * m_next;
	};


	struct __AAE_LINKED_LIST(_) /* __linked_list_##AAE_LINKED_LIST_TYPE -eg. __linked_list_float */
	{	
		
		//constructor
		__AAE_LINKED_LIST(_)();

		//member data
		aae_size_t m_size;
		__AAE_LINKED_LIST(_elem) * m_first;
		__AAE_LINKED_LIST(_elem) * m_last;
		__AAE_LINKED_LIST(_elem) * m_it;

		//member functions
		AAE_LINKED_LIST_RETURN_VALUES push_back(AAE_LINKED_LIST_TYPE tValue);
		AAE_LINKED_LIST_RETURN_VALUES push_front(AAE_LINKED_LIST_TYPE tValue);


	};


	AAE_LINKED_LIST_RETURN_VALUES __AAE_LINKED_LIST(_)::push_back(AAE_LINKED_LIST_TYPE tValue)
	{
	
		__AAE_LINKED_LIST(_elem) * pNewElem = AAE_NEW(__AAE_LINKED_LIST(_elem), AAE_LINKED_LIST_MEMORY_ARENA);
		if (!pNewElem) return AAE_LINKED_LIST_ALLOCATION_ERROR;


		pNewElem->m_next = NULL; pNewElem->m_data = tValue;
		if (!m_first) m_first = m_last = pNewElem;
		else { m_last->m_next = pNewElem; m_last = pNewElem; }


		m_size++;
		return AAE_LINKED_LIST_SUCCESS;
	}



	AAE_LINKED_LIST_RETURN_VALUES __AAE_LINKED_LIST(_)::push_front(AAE_LINKED_LIST_TYPE tValue)
	{

		__AAE_LINKED_LIST(_elem) * pNewElem = AAE_NEW(__AAE_LINKED_LIST(_elem), AAE_LINKED_LIST_MEMORY_ARENA);
		if (!pNewElem) return AAE_LINKED_LIST_SUCCESS;


		pNewElem->m_next = NULL; pNewElem->m_data = tValue;
		if (!m_first) m_first = m_last = pNewElem;
		else { pNewElem->m_next = m_first; m_first = pNewElem; }


		m_size++;
		return AAE_LINKED_LIST_SUCCESS;

	}


	__AAE_LINKED_LIST(_)::__AAE_LINKED_LIST(_)()
	{
		
		m_first = m_last = m_it = NULL;
		m_size = 0;

	}


	void __AAE_LINKED_LIST(_free_nodes)(__AAE_LINKED_LIST(_) * pList)
	{

		if (!pList) return;
		pList->m_it = pList->m_first;
		__AAE_LINKED_LIST(_elem) * pTempElem = NULL;

		while (pList->m_it != NULL)
		{

			pTempElem = pList->m_it;
			pList->m_it = pList->m_it->m_next;
			free(pTempElem);

		}

		pList->m_first = pList->m_last = pList->m_it = NULL;

	}




/**
*Types
*/
#define aae_LinkedList(TYPE)					__linked_list_##TYPE //Defines a linked list of a certain TYPE
#define aae_LinkedListElement(TYPE)				__linked_list_elem_##TYPE //Defines a node holding data of TYPE
/**
List of list members (better don't modify this using other than defined functions):
m_first - the first node in the list
m_last - the last node in the list
m_size - the size of the list
----------------------------------
m_it - an iterator to iterate list nodes
*/



/**
*Useful
*/
#define aae_LinkedListFreeNodes(TYPE, list)			__linked_list_free_nodes##TYPE(list)
#define aae_LinkedListForEach(list)				for (list->m_it = list->m_first; list->m_it != NULL; list->m_it = list->m_it->m_next)


/**
*Undefine defines
*/
#ifdef AAE_LINKED_LIST_TYPE
#undef AAE_LINKED_LIST_TYPE
#endif


#ifdef AAE_LINKED_LIST_MEMORY_ARENA
#undef AAE_LINKED_LIST_MEMORY_ARENA
#endif
