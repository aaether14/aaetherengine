/**
---aae_linked_list.def - Dinescu Stefan-Cristian aka Aaether - 14.12.2016(lu)
----------------------------------------------------------------------
Code generation for linked list holding TYPE data
-don't ever use variables, functions etc. starting with "__". Only the framework has this right.
AAE_LINKED_LIST_NAME must be defined
AAE_LINKED_LIST_DATA_TYPE must be defined
AAE_LINKED_LIST_MEMORY_ARENA must de defined - see aae_allocators.h for further reference
AAE_RB_TREE_DATA_DTOR may be defined in order to customly delete the data of deleted nodes
Features:
-push a new node to the front of the list
-push a new node to the back of the list
**/


#ifndef AAE_LINKED_LIST_DEF
#define AAE_LINKED_LIST_DEF
#include "aae_defines.h"
#include "aae_memory_allocator.h"
#include "error/aae_error.h"


/** linked list for loop **/
#define aae_LinkedListForEach(list) for (list->m_it = list->m_first; list->m_it != AAE_NULL; list->m_it = list->m_it->m_next)


enum AAE_LINKED_LIST_ERROR_CODES
{
	linked_list_no_error,
	linked_list_could_not_allocate_new_node
};

#endif /** AAE_LINKED_LIST_DEF **/


#ifndef AAE_LINKED_LIST_NAME
#error "Must define AAE_LINKED_LIST_NAME!"
#endif 


#ifndef AAE_LINKED_LIST_DATA_TYPE
#error "Must define AAE_LINKED_LIST_DATA_TYPE!"
#endif


#ifndef AAE_LINKED_LIST_MEMORY_ARENA
#error "Must define AAE_LINKED_LIST_MEMORY_ARENA"
#endif


struct AAE_LINKED_LIST_NAME
{	
		
	struct __elem 
	{
		AAE_LINKED_LIST_DATA_TYPE m_data;
		__elem * m_next;
		~__elem()
		{
			#ifdef AAE_LINKED_LIST_DATA_DTOR
			AAE_LINKED_LIST_DATA_DTOR(m_data);
			#endif
		}
	} *m_first, *m_last, *m_it;
	aae_size_t m_size; /** number of nodes in the list **/


	AAE_LINKED_LIST_NAME()
	{
		m_first = m_last = m_it = AAE_NULL;
		m_size = 0;
	}


	~AAE_LINKED_LIST_NAME()
	{
		aae_set_error(linked_list_no_error);
		m_it = m_first;
		__elem* pTempElem = AAE_NULL;
		while (m_it != AAE_NULL)
		{

			pTempElem = m_it;
			m_it = m_it->m_next;
			AAE_DELETE(pTempElem, AAE_LINKED_LIST_MEMORY_ARENA);

		}
		m_first = m_last = m_it = AAE_NULL;
		m_size = 0;
	}


	void push_back(AAE_LINKED_LIST_DATA_TYPE data)
	{	

		aae_set_error(linked_list_no_error);
		__elem* new_element = AAE_NEW(__elem, AAE_LINKED_LIST_MEMORY_ARENA);

		if (new_element == AAE_NULL)
		{
			aae_set_error(linked_list_could_not_allocate_new_node);
			return;
		}

		new_element->m_next = AAE_NULL; 
		new_element->m_data = data;
		if (m_first == AAE_NULL)
		{ 
			m_first = m_last = new_element;
		}
		else 
		{ 
			m_last->m_next = new_element; 
			m_last = new_element; 
		}
		++m_size;
	}


	void push_front(AAE_LINKED_LIST_DATA_TYPE data)
	{
		
		aae_set_error(linked_list_no_error);
		__elem* new_element = AAE_NEW(__elem, AAE_LINKED_LIST_MEMORY_ARENA);

		if (new_element == AAE_NULL)
		{
			aae_set_error(linked_list_could_not_allocate_new_node);
			return;
		}

		new_element->m_data = data;
		if (m_first == AAE_NULL)
		{ 
			new_element->m_next = AAE_NULL; 
			m_first = m_last = new_element;
		}
		else 
		{ 
			new_element->m_next = m_first;
			m_first = new_element;
		}
		++m_size;
	}	


	void pop_back()
	{
		aae_set_error(linked_list_no_error);
		if (m_size == 0)
			return;
		else if (m_size == 1)
		{
			AAE_DELETE(m_last, AAE_LINKED_LIST_MEMORY_ARENA);
			m_first = m_last = AAE_NULL;
			--m_size;
			return;
		}
		m_it = m_first;
		while (m_it->m_next != m_last)
			m_it = m_it->m_next;
		m_it->m_next = AAE_NULL;
		AAE_DELETE(m_last, AAE_LINKED_LIST_MEMORY_ARENA);
		m_last = m_it;
		--m_size;
	}


	void pop_front()
	{
		aae_set_error(linked_list_no_error);
		if (m_size == 0)
			return;
		else if (m_size == 1)
		{
			AAE_DELETE(m_last, AAE_LINKED_LIST_MEMORY_ARENA);
			m_first = m_last = AAE_NULL;
			--m_size;
			return;
		}
		__elem* pTempElem = m_first;
		m_first = m_first->m_next; 
		AAE_DELETE(pTempElem, AAE_LINKED_LIST_MEMORY_ARENA);
	}

};


/** Undefine defines **/
#ifdef AAE_LINKED_LIST_NAME
#undef AAE_LINKED_LIST_NAME
#endif

#ifdef AAE_LINKED_LIST_TYPE
#undef AAE_LINKED_LIST_TYPE
#endif

#ifdef AAE_LINKED_LIST_MEMORY_ARENA
#undef AAE_LINKED_LIST_MEMORY_ARENA
#endif

#ifdef AAE_LINKED_LIST_DATA_DTOR
#undef AAE_RB_TREE_DATA_DTOR
#endif