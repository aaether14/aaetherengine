/**
---aae_rb_tree.def - Dinescu Stefan-Cristian aka Aaether - 14.12.2016(lu)
----------------------------------------------------------------------
Code generation for red/black tree with TYPE keys
-don't ever use variables, functions etc. starting with "__". Only the framework has this right.
AAE_RB_TREE_NAME must be defined
AAE_RB_TREE_KEY_TYPE must be defined
AAE_RB_TREE_VALUE_TYPE may be defined for key/value pairs
AAE_RB_TREE_MEMORY_ARENA must de defined - see aae_allocators.h for further reference
AAE_RB_TREE_KEY_COMPARE_FUNCTION must be defined if < operator is invalid for provided key type
AAE_RB_TREE_KEY_DTOR may be defined in order to customly delete the key of deleted nodes
AAE_RB_TREE_VALUE_DTOR may be defined in order to customly delete the value of deleted nodes
default compare function: (a, b) -> ((a==b)?0:((a<b)?-1:1))
Features:
-insert nodes
-attempting to insert the same key twice will result in an update (if tree supports values)
-search for nodes
-remove nodes
-internal functions are to be used on your own risk
**/



#ifndef AAE_RB_TREE_DEF
#define AAE_RB_TREE_DEF
#include "aae_defines.h"
#include "aae_types.h"
#include "aae_memory_allocator.h"
#include "error/aae_error.h"



template <typename TREE, typename NODE>
void __rb_tree_left_rotate(TREE* tree, NODE* x)
{
	

	NODE* y = x->right;
	x->right = y->left;


	if (y->left != tree->m_nil)
		y->left->parent = x;


	y->parent = x->parent;
	if (x->parent == tree->m_nil)
		tree->m_root = y;
	else
	{

		if (x == x->parent->left)
			x->parent->left = y;
		else
			x->parent->right = y;
	}

	y->left = x;
	x->parent = y;
}



template <typename TREE, typename NODE>
void __rb_tree_right_rotate(TREE* tree, NODE* y)
{


	NODE* x = y->left;
	y->left = x->right;


	if (x->right != tree->m_nil)
		x->right->parent = y;


	x->parent = y->parent;
	if (y->parent == tree->m_nil) 
		tree->m_root = x;
	else
	{
		if (y == y->parent->left)
			y->parent->left = x;
		else
			y->parent->right = x;
	}

	x->right = y;
	y->parent = x;
}


template <typename TREE, typename NODE>
void __rb_tree_balance(TREE* tree, NODE* new_node)
{

	while (new_node->parent->color == NODE::red)
	{
		if (new_node->parent == new_node->parent->parent->left)
		{
			NODE* right_uncle = new_node->parent->parent->right;
			if (right_uncle->color == NODE::red)
			{
				right_uncle->color = NODE::black;
				new_node->parent->color = NODE::black;
				new_node->parent->parent->color = NODE::red;
				new_node = new_node->parent->parent;
			}
			else
			{
				if (new_node == new_node->parent->right)
				{

					new_node = new_node->parent;
					__rb_tree_left_rotate(tree, new_node);
				}		
				new_node->parent->color = NODE::black;
				new_node->parent->parent->color = NODE::red;
				__rb_tree_right_rotate(tree, new_node->parent->parent);
			}
		}
		else
		{
			NODE* left_uncle = new_node->parent->parent->left;
			if (left_uncle->color == NODE::red)
			{
				left_uncle->color = NODE::black;
				new_node->parent->color = NODE::black;
				new_node->parent->parent->color = NODE::red;
				new_node = new_node->parent->parent;
			}
			else
			{
				if (new_node == new_node->parent->left)
				{

					new_node = new_node->parent;
					__rb_tree_right_rotate(tree, new_node);
				}			
				new_node->parent->color = NODE::black;
				new_node->parent->parent->color = NODE::red;
				__rb_tree_left_rotate(tree, new_node->parent->parent);
			}
		}
	}
}


template <typename TREE, typename NODE>
void __tb_tree_fix_after_deletion(TREE* tree, NODE* x)
{

	NODE* w;
	while (x->color != NODE::red && x != tree->m_root)
	{
		if (x == x->parent->left)
		{
			w = x->parent->right;
			if (w->color == NODE::red)
			{
				w->color = NODE::black;
				x->parent->color = NODE::red;
				__rb_tree_left_rotate(tree, x->parent);
				w = x->parent->right;
			}
			if (w->right->color != NODE::red && w->left->color != NODE::red)
			{
				w->color = NODE::red;
				x = x->parent;
			}
			else
			{
				if (w->right->color != NODE::red)
				{
					w->left->color = NODE::black;
					w->color = NODE::red;
					__rb_tree_right_rotate(tree, w);
					w = x->parent->right;
				}
				w->color = x->parent->color;
				x->parent->color = NODE::black;
				w->right->color = NODE::black;
				__rb_tree_left_rotate(tree, x->parent);
				x = tree->m_root;
			}
		}
		else
		{
			w = x->parent->left;
			if (w->color == NODE::red)
			{
				w->color = NODE::black;
				x->parent->color = NODE::red;
				__rb_tree_right_rotate(tree, x->parent);
				w = x->parent->left;
			}
			if (w->right->color != NODE::red && w->left->color != NODE::red)
			{
				w->color = NODE::red;
				x = x->parent;
			}
			else
			{
				if (w->left->color != NODE::red)
				{
					w->right->color = NODE::black;
					w->color = NODE::red;
					__rb_tree_left_rotate(tree, w);
					w = x->parent->left;
				}
				w->color = x->parent->color;
				x->parent->color = NODE::black;
				w->left->color = NODE::black;
				__rb_tree_right_rotate(tree, x->parent);
				x = tree->m_root;
			}
		}
	}
	x->color = NODE::black;
}


template <typename TREE, typename NODE>
NODE* __rb_tree_next(TREE* tree, NODE* x)
{

	if (x == tree->m_nil)
		return tree->m_nil;

	NODE* y = x->right;
	if (y != tree->m_nil)
	{
		while (y->left != tree->m_nil)
			y = y->left;
		return y;
	}
	else
	{
		y = x->parent;
		while (x == y->right)
		{
			x = y;
			y = x->parent;
		}
		return y;
	}
}


template <typename TREE, typename NODE>
NODE* __rb_tree_previous(TREE* tree, NODE* x)
{

	if (x == tree->m_nil)
		return tree->m_nil;

	NODE* y = x->left;
	if (y != tree->m_nil)
	{
		while (y->right != tree->m_nil)
			y = y->right;
		return y;
	}
	else
	{
		y = x->parent;
		while (x == y->left)
		{
			x = y;
			y = x->parent;
		}
		return y;
	}
}


template <typename TREE>
typename TREE::__node* __rb_tree_first(TREE * tree)
{

	if (tree->m_root == tree->m_nil)
		return tree->m_nil;

	typename TREE::__node* it = tree->m_root;
	while (it->left != tree->m_nil)
		it = it->left;
	return it;
}


template <typename TREE>
typename TREE::__node* __rb_tree_last(TREE * tree)
{

	if (tree->m_root == tree->m_nil)
		return tree->m_nil;

	typename TREE::__node* it = tree->m_root;
	while (it->right != tree->m_nil)
		it = it->right;
	return it;
}


enum AAE_RB_TREE_ERROR_CODES
{
	rb_tree_no_error = 0,
	rb_tree_could_not_insert_on_invalid_node,
	rb_tree_could_not_search_on_invalid_node,
	rb_tree_could_not_allocate_nil_node,
	rb_tree_could_not_allocate_new_node
};
#endif /** AAE_RB_TREE_DEF **/


#ifndef AAE_RB_TREE_NAME
#error "Must define AAE_RB_TREE_NAME"
#endif


#ifndef AAE_RB_TREE_KEY_TYPE
#error "Must define AAE_RB_TREE_KEY_TYPE!"
#endif


#ifndef AAE_RB_TREE_MEMORY_ARENA
#error "Must define AAE_RB_TREE_MEMORY_ARENA!"
#endif


#ifndef AAE_RB_TREE_KEY_COMPARE_FUNCTION
#define AAE_RB_TREE_KEY_COMPARE_FUNCTION(a, b) ((a==b)?0:((a<b)?-1:1))
#endif


struct AAE_RB_TREE_NAME 
{

	struct __node /** a red/black node **/
	{	
		enum {black, red} color;
		AAE_RB_TREE_KEY_TYPE key;
		#ifdef AAE_RB_TREE_VALUE_TYPE
		AAE_RB_TREE_VALUE_TYPE value;
		#endif
		__node *parent, *left, *right;
		~__node()
		{
			#ifdef AAE_RB_TREE_KEY_DTOR
			AAE_RB_TREE_KEY_DTOR(key);
			#endif
			#ifdef AAE_RB_TREE_VALUE_DTOR
			AAE_RB_TREE_VALUE_DTOR(value);
			#endif
		}
	} *m_root, *m_nil;
	u8 m_action_flag; /** m_action_flag will be true to suggest different behavior **/
	aae_size_t m_size; /** is the number of nodes in the tree **/


	AAE_RB_TREE_NAME()
	{
		aae_set_error(rb_tree_no_error); /** no error at first **/
		m_nil = AAE_NEW(__node, AAE_RB_TREE_MEMORY_ARENA);

		if (m_nil == AAE_NULL)
		{
			aae_set_error(rb_tree_could_not_allocate_nil_node);
		}
		else
		{
			m_nil->parent = m_nil->left = m_nil->right = m_nil;
			m_nil->color = __node::black;
			m_root = m_nil;
			m_action_flag = 0;
			m_size = 0;
		}
	}


	~AAE_RB_TREE_NAME()
	{
		aae_set_error(rb_tree_no_error);
		__internal_delete_nodes(m_root);
		AAE_DELETE(m_nil, AAE_RB_TREE_MEMORY_ARENA);
	}


	#ifdef AAE_RB_TREE_VALUE_TYPE
	void insert(AAE_RB_TREE_KEY_TYPE key, AAE_RB_TREE_VALUE_TYPE value)
	#else
	void insert(AAE_RB_TREE_KEY_TYPE key)
	#endif
	{


		aae_set_error(rb_tree_no_error); /** no error at first **/
		__node * new_node = __internal_insert_bst(m_nil, m_root, key); /** attempt to insert a new node **/
		if (!new_node) return; /** give up balancing the tree on invalid insertion **/
		#ifdef AAE_RB_TREE_VALUE_TYPE
		new_node->value = value; /** set the value of the new node if user requested so **/
		#endif
		if (m_action_flag) { m_action_flag = false; return; } /** if we only need to update the node there's no need for balancing **/
		new_node->color = __node::red; /** make the new node red **/

		/** start rebalancing the tree **/
		__rb_tree_balance(this, new_node);
		m_root->color = __node::black;


	}


	void remove(AAE_RB_TREE_KEY_TYPE key)
	{

		aae_set_error(rb_tree_no_error);
		__node * node_to_delete = __internal_search(m_root, key);
		if (node_to_delete == m_nil)
			return;

		__node * y = (node_to_delete->left == m_nil || node_to_delete->right == m_nil) ? node_to_delete : __rb_tree_next(this, node_to_delete);
		__node * x = (y->left == m_nil) ? y->right : y->left;
		x->parent = y->parent;
		if (x->parent == m_root)
		{
			m_root->left = x;
		}
		else
		{
			if (y == y->parent->left)
				y->parent->left = x;
			else
				y->parent->right = x;
		}
		if (y != node_to_delete)
		{
			if (y->color == __node::black)
				__tb_tree_fix_after_deletion(this, x);
			y->left = node_to_delete->left;
			y->right = node_to_delete->right;
			y->parent = node_to_delete->parent;
			y->color = node_to_delete->color;
			node_to_delete->left->parent = node_to_delete->right->parent = y;
			if (node_to_delete == node_to_delete->parent->left)
				node_to_delete->parent->left = y; 
			else 
				node_to_delete->parent->right = y;
			AAE_DELETE(node_to_delete, AAE_RB_TREE_MEMORY_ARENA);
		}
		else
		{
			if (y->color == __node::black)
				__tb_tree_fix_after_deletion(this, x);
			AAE_DELETE(y, AAE_RB_TREE_MEMORY_ARENA);
		}
		--m_size;

	}


	void __internal_delete_nodes(__node* root)
	{
		if (root->left != m_nil)
			__internal_delete_nodes(root->left);
		if (root->right != m_nil)
			__internal_delete_nodes(root->right);
		if (root != m_nil)
		AAE_DELETE(root, AAE_RB_TREE_MEMORY_ARENA);
	}


	__node* __internal_insert_bst(__node* parent, __node*& root, AAE_RB_TREE_KEY_TYPE key)
	{ 

		if (!parent || !root)
		{
			aae_set_error(rb_tree_could_not_insert_on_invalid_node);
			return AAE_NULL;
		}

		if (root == m_nil)
		{
			
			root = AAE_NEW(__node, AAE_RB_TREE_MEMORY_ARENA);
			if (root == AAE_NULL)
			{
				aae_set_error(rb_tree_could_not_allocate_new_node);
				return AAE_NULL;
			}
			root->key = key;
			root->left = root->right = m_nil;
			root->parent = parent;
			++m_size;
			return root;

		}
		else
		{
			i32 partition_result = AAE_RB_TREE_KEY_COMPARE_FUNCTION(key, root->key);
			if (!partition_result)
			{
				m_action_flag = true; /** set action flag true to indicate we only need to update the returned node **/
				return root;
			}
			else if (partition_result < 0)
				return __internal_insert_bst(root, root->left, key);
			else
				return __internal_insert_bst(root, root->right, key);

		}
	
	}

	__node* __internal_search(__node* current_node, AAE_RB_TREE_KEY_TYPE key)
	{

		if (!current_node)
		{
			aae_set_error(rb_tree_could_not_search_on_invalid_node);
			return m_nil;
		}
		else if (current_node == m_nil)
			return m_nil;


		i32 partition_result = AAE_RB_TREE_KEY_COMPARE_FUNCTION(key, current_node->key);
		if (!partition_result)
			return current_node;
		else if (partition_result < 0)
			return __internal_search(current_node->left, key);
		else
			return __internal_search(current_node->right, key);

	}


	inline bool has(AAE_RB_TREE_KEY_TYPE key)
	{
		aae_set_error(rb_tree_no_error);
		return (__internal_search(m_root, key) != m_nil);
	}


	#ifdef AAE_RB_TREE_VALUE_TYPE
	inline AAE_RB_TREE_VALUE_TYPE get(AAE_RB_TREE_KEY_TYPE key)
	{
		aae_set_error(rb_tree_no_error);
		return __internal_search(m_root, key)->value;
	}
	#endif

};


/** Undefine defines **/
#ifdef AAE_RB_TREE_NAME
#undef AAE_RB_TREE_NAME
#endif

#ifdef AAE_RB_TREE_KEY_TYPE
#undef AAE_RB_TREE_KEY_TYPE
#endif

#ifdef AAE_RB_TREE_VALUE_TYPE
#undef AAE_RB_TREE_VALUE_TYPE
#endif

#ifdef AAE_RB_TREE_MEMORY_ARENA
#undef AAE_RB_TREE_MEMORY_ARENA
#endif

#ifdef AAE_RB_TREE_KEY_DTOR
#undef AAE_RB_TREE_KEY_DTOR
#endif

#ifdef AAE_RB_TREE_VALUE_DTOR
#undef AAE_RB_TREE_VALUE_DTOR
#endif

#ifdef AAE_RB_TREE_KEY_COMPARE_FUNCTION
#undef AAE_RB_TREE_KEY_COMPARE_FUNCTION
#endif